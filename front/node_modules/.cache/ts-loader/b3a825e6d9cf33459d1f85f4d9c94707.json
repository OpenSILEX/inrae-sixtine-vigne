{"remainingRequest":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/babel-loader/lib/index.js!/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/ts-loader/index.js??ref--14-2!/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/src/components/layout/SixtineLoginComponent.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/src/components/layout/SixtineLoginComponent.vue","mtime":1636714207126},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/cache-loader/dist/cjs.js","mtime":1635245896600},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/babel-loader/lib/index.js","mtime":1635246894104},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/ts-loader/index.js","mtime":1635245901572},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/cache-loader/dist/cjs.js","mtime":1635245896600},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/vue-loader/lib/index.js","mtime":1635246896232}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvY2hhcmxlcm8vR0lUL0dJVExBQi9vcGVuc2lsZXgtZGV2L2lucmFlLXNpeHRpbmUvZnJvbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9ob21lL2NoYXJsZXJvL0dJVC9HSVRMQUIvb3BlbnNpbGV4LWRldi9pbnJhZS1zaXh0aW5lL2Zyb250L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvY2hhcmxlcm8vR0lUL0dJVExBQi9vcGVuc2lsZXgtZGV2L2lucmFlLXNpeHRpbmUvZnJvbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvaG9tZS9jaGFybGVyby9HSVQvR0lUTEFCL29wZW5zaWxleC1kZXYvaW5yYWUtc2l4dGluZS9mcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMiOwppbXBvcnQgX2NyZWF0ZVN1cGVyIGZyb20gIi9ob21lL2NoYXJsZXJvL0dJVC9HSVRMQUIvb3BlbnNpbGV4LWRldi9pbnJhZS1zaXh0aW5lL2Zyb250L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlciI7CmltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tICJ0c2xpYiI7CmltcG9ydCB7IENvbXBvbmVudCwgUmVmIH0gZnJvbSAidnVlLXByb3BlcnR5LWRlY29yYXRvciI7CmltcG9ydCBWdWUgZnJvbSAidnVlIjsKaW1wb3J0IHsgVXNlciB9IGZyb20gIi4uLy4uLy4uLy4uLy4uL29wZW5zaWxleC1mcm9udC9mcm9udC9zcmMvbW9kZWxzL1VzZXIiOwoKdmFyIFNpeHRpbmVMb2dpbkNvbXBvbmVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Z1ZSkgewogIF9pbmhlcml0cyhTaXh0aW5lTG9naW5Db21wb25lbnQsIF9WdWUpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFNpeHRpbmVMb2dpbkNvbXBvbmVudCk7CgogIGZ1bmN0aW9uIFNpeHRpbmVMb2dpbkNvbXBvbmVudCgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2l4dGluZUxvZ2luQ29tcG9uZW50KTsKCiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgX3RoaXMudmVyc2lvbkluZm8gPSB7fTsKICAgIF90aGlzLmxvZ2luTWV0aG9kID0gInBhc3N3b3JkIjsKICAgIF90aGlzLmZvcmNlUmVmcmVzaCA9IGZhbHNlOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNpeHRpbmVMb2dpbkNvbXBvbmVudCwgW3sKICAgIGtleTogImZvcm0iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZW1haWw6ICIiLAogICAgICAgIHBhc3N3b3JkOiAiIgogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInVzZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS51c2VyOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFBISVNNb2R1bGVWZXJzaW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQSElTTW9kdWxlVmVyc2lvbigpIHsKICAgICAgZm9yICh2YXIgbW9kdWxlX3ZlcnNpb25faW5kZXggaW4gdGhpcy52ZXJzaW9uSW5mby5tb2R1bGVzX3ZlcnNpb24pIHsKICAgICAgICB2YXIgbW9kdWxlID0gdGhpcy52ZXJzaW9uSW5mby5tb2R1bGVzX3ZlcnNpb25bbW9kdWxlX3ZlcnNpb25faW5kZXhdOwogICAgICAgIGNvbnNvbGUubG9nKG1vZHVsZSk7CgogICAgICAgIGlmIChtb2R1bGUubmFtZS5pbmNsdWRlcygiUGhpc1dzTW9kdWxlIikpIHsKICAgICAgICAgIHJldHVybiBtb2R1bGUudmVyc2lvbjsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiAnVmVyc2lvbiB1bmRlZmluZWQnOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbm5lY3Rpb25PcHRpb25zIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgb3B0aW9ucyA9IFt7CiAgICAgICAgaWQ6ICJwYXNzd29yZCIsCiAgICAgICAgbGFiZWw6IHRoaXMuJHQoIkxvZ2luQ29tcG9uZW50LnBhc3N3b3JkQ29ubmVjdGlvblRpdGxlIikKICAgICAgfV07CiAgICAgIHZhciBvcGVuc2lsZXhDb25maWcgPSB0aGlzLiRvcGVuc2lsZXguZ2V0Q29uZmlnKCk7CgogICAgICBpZiAob3BlbnNpbGV4Q29uZmlnLm9wZW5JREF1dGhlbnRpY2F0aW9uVVJJKSB7CiAgICAgICAgb3B0aW9ucy5wdXNoKHsKICAgICAgICAgIGlkOiAib3BlbmlkIiwKICAgICAgICAgIGxhYmVsOiBvcGVuc2lsZXhDb25maWcub3BlbklEQ29ubmVjdGlvblRpdGxlCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBvcHRpb25zOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAgIHRoaXMudmVyc2lvbkluZm8gPSB0aGlzLiRvcGVuc2lsZXgudmVyc2lvbkluZm87CiAgICB9CiAgfSwgewogICAga2V5OiAibG9naW5NZXRob2RDaGFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvZ2luTWV0aG9kQ2hhbmdlKGxvZ2luTWV0aG9kKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IobG9naW5NZXRob2QpOwoKICAgICAgaWYgKGxvZ2luTWV0aG9kLmlkID09ICJvcGVuaWQiKSB7CiAgICAgICAgdmFyIG9wZW5zaWxleENvbmZpZyA9IHRoaXMuJG9wZW5zaWxleC5nZXRDb25maWcoKTsKICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG9wZW5zaWxleENvbmZpZy5vcGVuSURBdXRoZW50aWNhdGlvblVSSTsKICAgICAgfSBlbHNlIGlmIChsb2dpbk1ldGhvZC5pZCA9PSAicGFzc3dvcmQiKSB7CiAgICAgICAgdGhpcy52YWxpZGF0b3JSZWYucmVzZXQoKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImlzUmVzZXRQYXNzd29yZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNSZXNldFBhc3N3b3JkKCkgewogICAgICB2YXIgb3BlbnNpbGV4Q29uZmlnID0gdGhpcy4kb3BlbnNpbGV4LmdldENvbmZpZygpOwogICAgICByZXR1cm4gb3BlbnNpbGV4Q29uZmlnLmFjdGl2YXRlUmVzZXRQYXNzd29yZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJsb2dvdXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvZ291dCgpIHsKICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCJsb2dvdXQiKTsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goIi8iKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvbkxvZ2luIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkxvZ2luKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciB2YWxpZGF0b3JSZWYgPSB0aGlzLnZhbGlkYXRvclJlZjsKICAgICAgdmFsaWRhdG9yUmVmLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoaXNWYWxpZCkgewogICAgICAgIGlmIChpc1ZhbGlkKSB7CiAgICAgICAgICBfdGhpczIuJG9wZW5zaWxleC5zaG93TG9hZGVyKCk7CgogICAgICAgICAgX3RoaXMyLiRvcGVuc2lsZXguZ2V0U2VydmljZSgib3BlbnNpbGV4LXNlY3VyaXR5LkF1dGhlbnRpY2F0aW9uU2VydmljZSIpLmF1dGhlbnRpY2F0ZSh7CiAgICAgICAgICAgIGlkZW50aWZpZXI6IF90aGlzMi5mb3JtLmVtYWlsLAogICAgICAgICAgICBwYXNzd29yZDogX3RoaXMyLmZvcm0ucGFzc3dvcmQKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGh0dHApIHsKICAgICAgICAgICAgdmFyIHVzZXIgPSBVc2VyLmZyb21Ub2tlbihodHRwLnJlc3BvbnNlLnJlc3VsdC50b2tlbik7CgogICAgICAgICAgICBfdGhpczIuJG9wZW5zaWxleC5zZXRDb29raWVWYWx1ZSh1c2VyKTsKCiAgICAgICAgICAgIF90aGlzMi5mb3JjZVJlZnJlc2ggPSB0cnVlOwoKICAgICAgICAgICAgX3RoaXMyLiRzdG9yZS5jb21taXQoImxvZ2luIiwgdXNlcik7CgogICAgICAgICAgICBfdGhpczIuJHN0b3JlLmNvbW1pdCgicmVmcmVzaCIpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIGlmIChlcnJvci5zdGF0dXMgPT0gNDAzKSB7CiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiSW52YWxpZCBjcmVkZW50aWFscyIsIGVycm9yKTsKCiAgICAgICAgICAgICAgX3RoaXMyLiRvcGVuc2lsZXguZXJyb3JIYW5kbGVyKGVycm9yLCBfdGhpczIuJHQoImNvbXBvbmVudC5sb2dpbi5lcnJvcnMuaW52YWxpZC1jcmVkZW50aWFscyIpKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBfdGhpczIuJG9wZW5zaWxleC5lcnJvckhhbmRsZXIoZXJyb3IpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfdGhpczIuJG9wZW5zaWxleC5oaWRlTG9hZGVyKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH1dLCBbewogICAga2V5OiAiYXN5bmNJbml0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfYXN5bmNJbml0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCRvcGVuc2lsZXgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiAkb3BlbnNpbGV4LmxvYWRTZXJ2aWNlKCJvcGVuc2lsZXgtc2VjdXJpdHkuQXV0aGVudGljYXRpb25TZXJ2aWNlIik7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBhc3luY0luaXQoX3gpIHsKICAgICAgICByZXR1cm4gX2FzeW5jSW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYXN5bmNJbml0OwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gU2l4dGluZUxvZ2luQ29tcG9uZW50Owp9KFZ1ZSk7CgpfX2RlY29yYXRlKFtSZWYoInZhbGlkYXRvclJlZiIpXSwgU2l4dGluZUxvZ2luQ29tcG9uZW50LnByb3RvdHlwZSwgInZhbGlkYXRvclJlZiIsIHZvaWQgMCk7CgpTaXh0aW5lTG9naW5Db21wb25lbnQgPSBfX2RlY29yYXRlKFtDb21wb25lbnRdLCBTaXh0aW5lTG9naW5Db21wb25lbnQpOwpleHBvcnQgZGVmYXVsdCBTaXh0aW5lTG9naW5Db21wb25lbnQ7"},null]}