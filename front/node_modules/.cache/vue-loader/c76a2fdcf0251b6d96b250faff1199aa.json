{"remainingRequest":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/src/components/layout/SixtineLoginComponent.vue?vue&type=style&index=0&id=327110b4&scoped=true&lang=scss&","dependencies":[{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/src/components/layout/SixtineLoginComponent.vue","mtime":1636714207126},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/css-loader/dist/cjs.js","mtime":1635245902509},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1635246896232},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/postcss-loader/src/index.js","mtime":1635245903001},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/node_modules/sass-loader/dist/cjs.js","mtime":1635245907027},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/cache-loader/dist/cjs.js","mtime":1635245896600},{"path":"/home/charlero/GIT/GITLAB/opensilex-dev/inrae-sixtine/front/node_modules/vue-loader/lib/index.js","mtime":1635246896232}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5mdWxsbW9kYWwgewogIGRpc3BsYXk6IGJsb2NrOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDA7CiAgYm90dG9tOiAwOwogIGxlZnQ6IDA7CiAgcmlnaHQ6IDA7CiAgaGVpZ2h0OiAxMDAlOwogIHdpZHRoOiAxMDAlOwogIHotaW5kZXg6IDk5OTk7Cn0KCi5sb2dvLWNlbnRlcmVkID4gaW1nIHsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgd2lkdGg6IDM1MHB4OwogIGhlaWdodDogMTUwcHg7ICAKfQoKLmxvZ28tYmcgPiBpbWd7CiAgbWF4LXdpZHRoOiAxMDAlOwogIG1heC1oZWlnaHQ6IDEwMCU7ICAKfQoKLmF1dGhlbnRpY2F0aW9uLWZvcm0gLmVycm9yLW1lc3NhZ2UgewogIHRvcDogMzdweDsKfQoKLmF1dGhlbnRpY2F0aW9uLWZvcm0gZmllbGRzZXQgewogIG1hcmdpbi1ib3R0b206IDI1cHg7Cn0KCi5sb2dvLWlucmFlIHsKICBtYXJnaW4tdG9wOiAyNXB4Owp9Cgo="},{"version":3,"sources":["SixtineLoginComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"SixtineLoginComponent.vue","sourceRoot":"src/components/layout","sourcesContent":["<template>\n  <div class=\"fullmodal auth-wrapper\" v-if=\"!user.isLoggedIn() || forceRefresh\">\n    <div class=\"container-fluid h-100\">\n      <div class=\"row flex-row h-100 bg-white\">\n        <div class=\"col-xl-8 col-lg-6 col-md-5 p-0 d-md-block d-lg-block d-sm-none d-none\">\n          <div class=\"lavalite-bg\"\n            v-bind:style=\"{'background-image': 'url(' + $opensilex.getResourceURI('images/opensilex-login-bg.jpg') + ')'}\">\n            <div class=\"lavalite-overlay\"></div>\n          </div>\n        </div>\n        <div class=\"col-xl-4 col-lg-6 col-md-7 my-auto p-0\">\n          <div class=\"authentication-form mx-auto\">\n            <div class=\"logo-centered\">\n              <img v-bind:src=\"$opensilex.getResourceURI('images/sixtine-logo.png')\"/>\n            </div>\n            <opensilex-SelectForm\n              v-if=\"connectionOptions.length > 1\"\n              :label=\"$t('LoginComponent.selectLoginMethod')\"\n              :options=\"connectionOptions\"\n              :selected.sync=\"loginMethod\"\n              @select=\"loginMethodChange\"\n            ></opensilex-SelectForm>\n            <p>{{ $t(\"sixtine.login.info\") }}:</p>\n            <ValidationObserver v-if=\"loginMethod == 'password'\" ref=\"validatorRef\">\n              <b-form @submit.prevent=\"onLogin\" class=\"fullmodal-form\">\n                <b-form-group id=\"login-group\" required>\n                  <ValidationProvider :name=\"$t('component.login.validation.email')\" rules=\"required|emailOrUrl\" v-slot=\"{ errors }\" >\n                    <b-form-input id=\"email\" v-model=\"form.email\" required\n                      :placeholder=\"$t('component.login.input.email')\"\n                    ></b-form-input>\n                    <i class=\"ik ik-user\"></i>\n                    <div v-if=\"errors.length > 0\" class=\"error-message alert alert-danger\">{{ errors[0] }}</div>\n                  </ValidationProvider>\n                </b-form-group>\n\n                <b-form-group id=\"password-group\" required>\n                  <ValidationProvider :name=\"$t('component.login.validation.password')\" rules=\"required\" v-slot=\"{ errors }\">\n                    <b-form-input id=\"password\" type=\"password\" v-model=\"form.password\" required\n                      :placeholder=\"$t('component.login.input.password')\"\n                    ></b-form-input>\n                    <i class=\"ik ik-lock\"></i>\n                    <div v-if=\"errors.length > 0\" class=\"error-message alert alert-danger\">{{ errors[0] }}</div>\n                  </ValidationProvider>\n                </b-form-group> \n                <a href=\"forgot-password\" v-if=\"!isResetPassword()\"><span>{{$t('LoginComponent.forgotPassword')}}</span></a>\n                <div class=\"sign-btn text-center\">\n                  <b-button type=\"submit\" variant=\"primary\" v-text=\"$t('component.login.button.login')\"></b-button>\n                </div>\n              </b-form>\n            </ValidationObserver>\n            <div class=\"logo-inrae text-center\">\n              <img v-bind:src=\"$opensilex.getResourceURI('images/logo-marque-inrae.png')\" alt=\"inrae-logo\"/>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Ref } from \"vue-property-decorator\";\nimport Vue from \"vue\";\nimport OpenSilexVuePlugin from \"../../../../../opensilex-front/front/src/models/OpenSilexVuePlugin\";\nimport { User } from \"../../../../../opensilex-front/front/src/models/User\";\n// @ts-ignore\nimport { TokenGetDTO, AuthenticationService } from \"opensilex-security/index\";\n// @ts-ignore\nimport HttpResponse, { OpenSilexResponse } from \"opensilex-security/HttpResponse\";\nimport { FrontConfigDTO } from \"../../../../../opensilex-front/front/src/lib\";\n// @ts-ignore\nimport { SystemService, versionInfoDTO } from \"opensilex-core/index\";\n\n@Component\nexport default class SixtineLoginComponent extends Vue { \n  service: SystemService;\n  versionInfo: versionInfoDTO = {};\n  $store: any;\n  $router: any;\n  $t: any;\n\n  get form() {\n    return {\n      email: \"\",\n      password: \"\"\n    };\n  }\n\n\n  get user() {\n    return this.$store.state.user;\n  }\n\n  getPHISModuleVersion(){\n    for(let module_version_index in this.versionInfo.modules_version){\n      let module = this.versionInfo.modules_version[module_version_index]\n\n      console.log(module)\n      if(module.name.includes(\"PhisWsModule\")){\n        return module.version;\n      }\n    }\n    return 'Version undefined'\n  }\n\n  loginMethod = \"password\";\n\n  get connectionOptions() {\n    let options = [\n      {\n        id: \"password\",\n        label: this.$t(\"LoginComponent.passwordConnectionTitle\")\n      }\n    ];\n\n    let opensilexConfig: FrontConfigDTO = this.$opensilex.getConfig();\n\n    if (opensilexConfig.openIDAuthenticationURI) {\n      options.push({\n        id: \"openid\",\n        label: opensilexConfig.openIDConnectionTitle\n      });\n    }\n\n    return options;\n  }\n\n  created() {\n    this.versionInfo = this.$opensilex.versionInfo;\n  }\n\n  loginMethodChange(loginMethod) {\n    console.error(loginMethod);\n    if (loginMethod.id == \"openid\") {\n      let opensilexConfig: FrontConfigDTO = this.$opensilex.getConfig();\n      window.location.href = opensilexConfig.openIDAuthenticationURI;\n    } else if (loginMethod.id == \"password\") {\n      this.validatorRef.reset();\n    }\n  }\n\n  isResetPassword(){\n    let opensilexConfig: FrontConfigDTO = this.$opensilex.getConfig();\n    return opensilexConfig.activateResetPassword;\n  }\n\n  $opensilex: OpenSilexVuePlugin;\n\n  static async asyncInit($opensilex: OpenSilexVuePlugin) {\n    await $opensilex.loadService(\"opensilex-security.AuthenticationService\");\n  }\n\n  logout() {\n    this.$store.commit(\"logout\");\n    this.$router.push(\"/\");\n  }\n\n  @Ref(\"validatorRef\") readonly validatorRef!: any;\n\n  forceRefresh = false;\n  onLogin() {\n    let validatorRef: any = this.validatorRef;\n    validatorRef.validate().then(isValid => {\n      if (isValid) {\n        this.$opensilex.showLoader();\n        this.$opensilex\n          .getService<AuthenticationService>(\n            \"opensilex-security.AuthenticationService\"\n          )\n          .authenticate({\n            identifier: this.form.email,\n            password: this.form.password\n          })\n          .then((http: HttpResponse<OpenSilexResponse<TokenGetDTO>>) => {\n            let user = User.fromToken(http.response.result.token);\n            this.$opensilex.setCookieValue(user);\n            this.forceRefresh = true;\n            this.$store.commit(\"login\", user);\n            this.$store.commit(\"refresh\");\n          })\n          .catch(error => {\n            if (error.status == 403) {\n              console.error(\"Invalid credentials\", error);\n              this.$opensilex.errorHandler(\n                error,\n                this.$t(\"component.login.errors.invalid-credentials\")\n              );\n            } else {\n              this.$opensilex.errorHandler(error);\n            }\n            this.$opensilex.hideLoader();\n          });\n      }\n    });\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.fullmodal {\n  display: block;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 9999;\n}\n\n.logo-centered > img {\n  display: inline-block;\n  width: 350px;\n  height: 150px;  \n}\n\n.logo-bg > img{\n  max-width: 100%;\n  max-height: 100%;  \n}\n\n.authentication-form .error-message {\n  top: 37px;\n}\n\n.authentication-form fieldset {\n  margin-bottom: 25px;\n}\n\n.logo-inrae {\n  margin-top: 25px;\n}\n\n</style>\n\n<i18n>\nen:\n  LoginComponent:\n    selectLoginMethod: Select login method\n    passwordConnectionTitle: Connect with password\n    forgotPassword: Forgot password ?\nfr:\n  LoginComponent:\n    selectLoginMethod: Choisir la méthode de connexion\n    passwordConnectionTitle: Connexion par mot de passe\n    forgotPassword: Mot de passe oublié ?\n</i18n>\n"]}]}